echnologies Used
Component	Tech Stack
Backend API	FastAPI
Embedding Model	Gemini text-embedding-004
LLM	Gemini gemini-2.5-flash
Vector DB	Pinecone (Serverless AWS)
PDF Extraction	PyMuPDF (fitz)
Hosting	Render.com
Auth	Bearer Token

🧠 Architecture
text
Copy
Edit
PDF URL/Input
   │
   ▼
Document Processor (PyMuPDF)
   │
   ▼
Text Chunker (fixed-length segments)
   │
   ▼
Gemini Embedding (text-embedding-004)
   │
   ▼
Pinecone Index (stored per document hash namespace)
   │
   ▼
When a user asks questions:
    └─► Generate query embedding
    └─► Search Pinecone (top-k context)
    └─► Gemini 2.5 Flash (JSON formatted answers)
    └─► Return list of answers
🛡️ API Endpoint
POST /hackrx/run

Request Headers:
http
Copy
Edit
Authorization: Bearer <your_token>
Content-Type: application/json
Request Body:
json
Copy
Edit
{
  "documents": "https://example.com/sample.pdf",
  "questions": [
    "What is the purpose of this document?",
    "Is there any contact information?",
    "Does it include financial data?"
  ]
}
Response:
json
Copy
Edit
{
  "answers": [
    "This is a test document for validating PDF rendering.",
    "Yes, contact info is provided in the footer section.",
    "No financial data is mentioned in the text."
  ]
}
🧪 Testing via curl
bash
Copy
Edit
curl -X POST https://team7seas.onrender.com/hackrx/run \
  -H "Authorization: Bearer <your_token>" \
  -H "Content-Type: application/json" \
  -d '{
    "documents": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf",
    "questions": [
      "What is the purpose of this document?",
      "Does it contain technical information?"
    ]
  }'
📝 Additional Notes
Each document is hashed (MD5) and stored in a Pinecone namespace to isolate vector storage per document.

Gemini responses are validated and parsed from structured JSON (answer, condition, rationale) but only answer is returned to the user for clarity.

Server times out in ~30 seconds; Gemini and Pinecone queries are optimized for speed.

